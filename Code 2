import librosa
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

def extract_features(audio_path):
    """
    Extracts features from an audio file.

    Args:
        audio_path: Path to the audio file.

    Returns:
        A list of features extracted from the audio file.
    """

    # Load the audio file
    signal, sample_rate = librosa.load(audio_path)

    # Extract MFCCs
    mfccs = librosa.feature.mfcc(y=signal, sr=sample_rate)

    # Extract chroma
    chroma = librosa.feature.chroma_stft(y=signal, sr=sample_rate)

    # Extract melspectrogram
    melspec = librosa.feature.melspectrogram(y=signal, sr=sample_rate)

    # Flatten the features
    features = np.concatenate([mfccs.flatten(), chroma.flatten(), melspec.flatten()])

    return features

# Load the dataset
dataset = []
for emotion in ["neutral", "calm", "happy", "sad", "angry", "fear", "disgust", "surprise"]:
    for i in range(1, 11):
        audio_path = f"path/to/dataset/{emotion}/{emotion}{i}.wav"
        features = extract_features(audio_path)
        dataset.append((features, emotion))

# Split the dataset into training and testing sets
X, y = zip(*dataset)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the model
model = SVC(kernel="linear", C=1.0)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
